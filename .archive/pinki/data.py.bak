#!/usr/bin/env python

import cv2

import numpy as np
import math


from robolab_turtlebot import Turtlebot, detector

WINDOW = 'markers'


def cceck(hsv,image,x,y):
    h=hsv[0]
    s = hsv[1]
    v = hsv[2]

    r_trsh=10
    g_trsh=10
    b_trsh=30

    red_ref = [0,130,80]
    blue_ref = [120,80,80]
    green_ref = [60,80,80]
    if (abs(h-red_ref[0]) <r_trsh and s>red_ref[1] and v>red_ref[2]):
        image[y][x] = [0,0,255]
    elif (abs(h-green_ref[0]) <g_trsh and s>green_ref[1] and v>green_ref[2]):
        image[y][x] = [0,255,0]
    elif (abs(h-blue_ref[0]) <b_trsh and s>blue_ref[1] and v>blue_ref[2]):
        image[y][x] = [255,0,0]
    else:
        image[y][x] = [0,0,0]


def get_delta(bod,pc):
    x,y,w,h=bod
    r_mid = (round(x+w/2),round(y+h/2))

    dx = 0
    dy = 0
    dz = 0

    for i in range(-5,5):
        for j in range(-5,5):
            point = pc[r_mid[1]+i][r_mid[0]+j]
            dx += point[0]
            dy += point[1]
            dz += point[2]

    dx /=100
    dy /=100
    dz /=100

    return dx,dy,dz




def main():

    turtle = Turtlebot(rgb=True, pc =True)
    cv2.namedWindow(WINDOW)

    while not turtle.is_shutting_down():
        # get point cloud
        image = turtle.get_rgb_image()
        pc = turtle.get_point_cloud()

        # wait for image to be ready
        if image is None or pc is None:
            continue

        hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)


        print('update')
        """for y in range(len(image)):
            for x in range(len(image[0])):
                cceck(hsv[y][x],image,x,y)"""

        r_low = np.array([0,130,80])
        r_up = np.array([10,255,255])

        b_low = np.array([90,130,80])
        b_up = np.array([150,255,255])

        g_low = np.array([50,130,80])
        g_up = np.array([70,255,255])

        r_mask = cv2.inRange(hsv, r_low, r_up)
        b_mask = cv2.inRange(hsv, b_low, b_up)
        g_mask = cv2.inRange(hsv, g_low, g_up)

        a_mask = cv2.bitwise_or(r_mask,b_mask)
        c_mask = cv2.bitwise_or(a_mask,g_mask)

        masked_img = cv2.bitwise_and(image, image, mask = c_mask)
       


        contours_r, _ = cv2.findContours(r_mask,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)
        contours_g, _ = cv2.findContours(g_mask,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)
        contours_b, _ = cv2.findContours(b_mask,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)

        r_slp = []
        g_slp = []
        b_slp = []

        for cnt in contours_r:
            x,y,w,h = cv2.boundingRect(cnt)
            if w*h>3000 and w*3<h and w*9>h:
                r_slp.append((x,y,w,h))
                img = cv2.drawContours(masked_img,[cnt],0,(255,255,255),2)
                img = cv2.rectangle(masked_img,(x,y),(x+w,y+h),(0,0,255),2)

        for cnt in contours_g:
            x,y,w,h = cv2.boundingRect(cnt)
            if w*h>3000 and w*3<h and w*9>h:
                g_slp.append((x,y,w,h))
                img = cv2.drawContours(masked_img,[cnt],0,(255,255,255),2)
                img = cv2.rectangle(masked_img,(x,y),(x+w,y+h),(0,255,0),2)

        for cnt in contours_b:
            x,y,w,h = cv2.boundingRect(cnt)
            if w*h>3000 and w*3<h and w*9>h:
                b_slp.append((x,y,w,h))
                img = cv2.drawContours(masked_img,[cnt],0,(255,255,255),2)
                img = cv2.rectangle(masked_img,(x,y),(x+w,y+h),(255,0,0),2)



        if len(r_slp)>0 and len(b_slp)>0:
            dx_r,dy_r,dz_r = get_delta(r_slp[0],pc)
            dx_b,dy_b,dz_b = get_delta(b_slp[0],pc)


            dx = (dx_r-dx_b)**2
            dy = (dy_r-dy_b)**2
            dz = (dz_r-dz_b)**2
            
            dff = dx+dy+dz

            

            print(dff)

            #turtle.cmd_velocity(angular=-alfa)
            

                #map(,hsv)

                # show image
        cv2.imshow(WINDOW, img)
        cv2.waitKey(1)


if __name__ == '__main__':
    main()
